// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageType.proto

package com.fly.netty.codec.protobuf;

public final class MessageType {
  private MessageType() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>zero = 0;</code>
     */
    zero(0),
    /**
     * <pre>
     *客户端发送机器码
     * </pre>
     *
     * <code>mid = 101;</code>
     */
    mid(101),
    /**
     * <pre>
     *初始化信息
     * </pre>
     *
     * <code>init = 102;</code>
     */
    init(102),
    /**
     * <pre>
     *借充电宝
     * </pre>
     *
     * <code>open = 103;</code>
     */
    open(103),
    /**
     * <pre>
     *还充电宝
     * </pre>
     *
     * <code>lock = 104;</code>
     */
    lock(104),
    /**
     * <pre>
     *主板自检故障
     * </pre>
     *
     * <code>error = 105;</code>
     */
    error(105),
    /**
     * <pre>
     *更新信息
     * </pre>
     *
     * <code>update = 106;</code>
     */
    update(106),
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>heat = 107;</code>
     */
    heat(107),
    /**
     * <code>req = 108;</code>
     */
    req(108),
    /**
     * <code>change = 109;</code>
     */
    change(109),
    /**
     * <pre>
     * </pre>
     *
     * <code>change_back_ok = 110;</code>
     */
    change_back_ok(110),
    /**
     * <code>change_back_error = 111;</code>
     */
    change_back_error(111),
    /**
     * <pre>
     *服务器返回机器码认证成功
     * </pre>
     *
     * <code>mid_ok = 201;</code>
     */
    mid_ok(201),
    /**
     * <pre>
     *初始化信息成功  
     * </pre>
     *
     * <code>init_ok = 202;</code>
     */
    init_ok(202),
    /**
     * <pre>
     *借充电宝成功
     * </pre>
     *
     * <code>open_ok = 203;</code>
     */
    open_ok(203),
    /**
     * <pre>
     *还充电宝成功
     * </pre>
     *
     * <code>lock_ok = 204;</code>
     */
    lock_ok(204),
    /**
     * <pre>
     *主板自检故障存储成功
     * </pre>
     *
     * <code>error_ok = 205;</code>
     */
    error_ok(205),
    /**
     * <pre>
     *更新信息成功
     * </pre>
     *
     * <code>update_ok = 206;</code>
     */
    update_ok(206),
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>heat_ok = 207;</code>
     */
    heat_ok(207),
    /**
     * <code>req_ok = 208;</code>
     */
    req_ok(208),
    /**
     * <pre>
     *更换消息发送成功
     * </pre>
     *
     * <code>change_ok = 209;</code>
     */
    change_ok(209),
    /**
     * <pre>
     *服务器返回机器码认证失败 
     * </pre>
     *
     * <code>mid_error = 401;</code>
     */
    mid_error(401),
    /**
     * <pre>
     *初始化信息存储失败
     * </pre>
     *
     * <code>init_error = 402;</code>
     */
    init_error(402),
    /**
     * <pre>
     *借充电宝失败
     * </pre>
     *
     * <code>open_error = 403;</code>
     */
    open_error(403),
    /**
     * <pre>
     *还充电宝失败
     * </pre>
     *
     * <code>lock_error = 404;</code>
     */
    lock_error(404),
    /**
     * <pre>
     *主板自检故障发送失败
     * </pre>
     *
     * <code>error_error = 405;</code>
     */
    error_error(405),
    /**
     * <pre>
     *更新信息成功
     * </pre>
     *
     * <code>update_error = 406;</code>
     */
    update_error(406),
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>heat_error = 407;</code>
     */
    heat_error(407),
    /**
     * <code>req_error = 408;</code>
     */
    req_error(408),
    /**
     * <pre>
     *更换失败
     * </pre>
     *
     * <code>change_error = 409;</code>
     */
    change_error(409),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>zero = 0;</code>
     */
    public static final int zero_VALUE = 0;
    /**
     * <pre>
     *客户端发送机器码
     * </pre>
     *
     * <code>mid = 101;</code>
     */
    public static final int mid_VALUE = 101;
    /**
     * <pre>
     *初始化信息
     * </pre>
     *
     * <code>init = 102;</code>
     */
    public static final int init_VALUE = 102;
    /**
     * <pre>
     *借充电宝
     * </pre>
     *
     * <code>open = 103;</code>
     */
    public static final int open_VALUE = 103;
    /**
     * <pre>
     *还充电宝
     * </pre>
     *
     * <code>lock = 104;</code>
     */
    public static final int lock_VALUE = 104;
    /**
     * <pre>
     *主板自检故障
     * </pre>
     *
     * <code>error = 105;</code>
     */
    public static final int error_VALUE = 105;
    /**
     * <pre>
     *更新信息
     * </pre>
     *
     * <code>update = 106;</code>
     */
    public static final int update_VALUE = 106;
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>heat = 107;</code>
     */
    public static final int heat_VALUE = 107;
    /**
     * <code>req = 108;</code>
     */
    public static final int req_VALUE = 108;
    /**
     * <code>change = 109;</code>
     */
    public static final int change_VALUE = 109;
    /**
     * <pre>
     * </pre>
     *
     * <code>change_back_ok = 110;</code>
     */
    public static final int change_back_ok_VALUE = 110;
    /**
     * <code>change_back_error = 111;</code>
     */
    public static final int change_back_error_VALUE = 111;
    /**
     * <pre>
     *服务器返回机器码认证成功
     * </pre>
     *
     * <code>mid_ok = 201;</code>
     */
    public static final int mid_ok_VALUE = 201;
    /**
     * <pre>
     *初始化信息成功  
     * </pre>
     *
     * <code>init_ok = 202;</code>
     */
    public static final int init_ok_VALUE = 202;
    /**
     * <pre>
     *借充电宝成功
     * </pre>
     *
     * <code>open_ok = 203;</code>
     */
    public static final int open_ok_VALUE = 203;
    /**
     * <pre>
     *还充电宝成功
     * </pre>
     *
     * <code>lock_ok = 204;</code>
     */
    public static final int lock_ok_VALUE = 204;
    /**
     * <pre>
     *主板自检故障存储成功
     * </pre>
     *
     * <code>error_ok = 205;</code>
     */
    public static final int error_ok_VALUE = 205;
    /**
     * <pre>
     *更新信息成功
     * </pre>
     *
     * <code>update_ok = 206;</code>
     */
    public static final int update_ok_VALUE = 206;
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>heat_ok = 207;</code>
     */
    public static final int heat_ok_VALUE = 207;
    /**
     * <code>req_ok = 208;</code>
     */
    public static final int req_ok_VALUE = 208;
    /**
     * <pre>
     *更换消息发送成功
     * </pre>
     *
     * <code>change_ok = 209;</code>
     */
    public static final int change_ok_VALUE = 209;
    /**
     * <pre>
     *服务器返回机器码认证失败 
     * </pre>
     *
     * <code>mid_error = 401;</code>
     */
    public static final int mid_error_VALUE = 401;
    /**
     * <pre>
     *初始化信息存储失败
     * </pre>
     *
     * <code>init_error = 402;</code>
     */
    public static final int init_error_VALUE = 402;
    /**
     * <pre>
     *借充电宝失败
     * </pre>
     *
     * <code>open_error = 403;</code>
     */
    public static final int open_error_VALUE = 403;
    /**
     * <pre>
     *还充电宝失败
     * </pre>
     *
     * <code>lock_error = 404;</code>
     */
    public static final int lock_error_VALUE = 404;
    /**
     * <pre>
     *主板自检故障发送失败
     * </pre>
     *
     * <code>error_error = 405;</code>
     */
    public static final int error_error_VALUE = 405;
    /**
     * <pre>
     *更新信息成功
     * </pre>
     *
     * <code>update_error = 406;</code>
     */
    public static final int update_error_VALUE = 406;
    /**
     * <pre>
     *心跳
     * </pre>
     *
     * <code>heat_error = 407;</code>
     */
    public static final int heat_error_VALUE = 407;
    /**
     * <code>req_error = 408;</code>
     */
    public static final int req_error_VALUE = 408;
    /**
     * <pre>
     *更换失败
     * </pre>
     *
     * <code>change_error = 409;</code>
     */
    public static final int change_error_VALUE = 409;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MsgType valueOf(int value) {
      return forNumber(value);
    }

    public static MsgType forNumber(int value) {
      switch (value) {
        case 0: return zero;
        case 101: return mid;
        case 102: return init;
        case 103: return open;
        case 104: return lock;
        case 105: return error;
        case 106: return update;
        case 107: return heat;
        case 108: return req;
        case 109: return change;
        case 110: return change_back_ok;
        case 111: return change_back_error;
        case 201: return mid_ok;
        case 202: return init_ok;
        case 203: return open_ok;
        case 204: return lock_ok;
        case 205: return error_ok;
        case 206: return update_ok;
        case 207: return heat_ok;
        case 208: return req_ok;
        case 209: return change_ok;
        case 401: return mid_error;
        case 402: return init_error;
        case 403: return open_error;
        case 404: return lock_error;
        case 405: return error_error;
        case 406: return update_error;
        case 407: return heat_error;
        case 408: return req_error;
        case 409: return change_error;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MsgType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.fly.netty.codec.protobuf.MessageType.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MsgType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:MsgType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021MessageType.proto*\270\003\n\007MsgType\022\010\n\004zero\020" +
      "\000\022\007\n\003mid\020e\022\010\n\004init\020f\022\010\n\004open\020g\022\010\n\004lock\020h" +
      "\022\t\n\005error\020i\022\n\n\006update\020j\022\010\n\004heat\020k\022\007\n\003req" +
      "\020l\022\n\n\006change\020m\022\022\n\016change_back_ok\020n\022\025\n\021ch" +
      "ange_back_error\020o\022\013\n\006mid_ok\020\311\001\022\014\n\007init_o" +
      "k\020\312\001\022\014\n\007open_ok\020\313\001\022\014\n\007lock_ok\020\314\001\022\r\n\010erro" +
      "r_ok\020\315\001\022\016\n\tupdate_ok\020\316\001\022\014\n\007heat_ok\020\317\001\022\013\n" +
      "\006req_ok\020\320\001\022\016\n\tchange_ok\020\321\001\022\016\n\tmid_error\020" +
      "\221\003\022\017\n\ninit_error\020\222\003\022\017\n\nopen_error\020\223\003\022\017\n\n" +
      "lock_error\020\224\003\022\020\n\013error_error\020\225\003\022\021\n\014updat",
      "e_error\020\226\003\022\017\n\nheat_error\020\227\003\022\016\n\treq_error" +
      "\020\230\003\022\021\n\014change_error\020\231\003B+\n\034com.fly.netty." +
      "codec.protobufB\013MessageTypeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
