// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageType.proto

package com.fly.netty.codec.protobuf;

public final class MessageType {
  private MessageType() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code MsgType}
   */
  public enum MsgType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ZERO = 0;</code>
     */
    ZERO(0),
    /**
     * <pre>
     *客户端发送机器码认证
     * </pre>
     *
     * <code>AUTH = 1001;</code>
     */
    AUTH(1001),
    /**
     * <pre>
     *服务认证成功
     * </pre>
     *
     * <code>AUTH_BACK_OK = 2001;</code>
     */
    AUTH_BACK_OK(2001),
    /**
     * <pre>
     *认证失败
     * </pre>
     *
     * <code>AUTH_BACK_ERROR = 4001;</code>
     */
    AUTH_BACK_ERROR(4001),
    /**
     * <pre>
     *客户端初始化机器data
     * </pre>
     *
     * <code>INIT = 1002;</code>
     */
    INIT(1002),
    /**
     * <pre>
     *服务器存储init数据成功
     * </pre>
     *
     * <code>INIT_BACK_OK = 2002;</code>
     */
    INIT_BACK_OK(2002),
    /**
     * <pre>
     * </pre>
     *
     * <code>INIT_BACK_ERROR = 4002;</code>
     */
    INIT_BACK_ERROR(4002),
    /**
     * <pre>
     *客户端轮询更新data
     * </pre>
     *
     * <code>UPDATE = 1003;</code>
     */
    UPDATE(1003),
    /**
     * <pre>
     *服务器更新成功
     * </pre>
     *
     * <code>UPDATE_BACK_OK = 2003;</code>
     */
    UPDATE_BACK_OK(2003),
    /**
     * <pre>
     *更新失败
     * </pre>
     *
     * <code>UPDATE_BACK_ERROR = 4003;</code>
     */
    UPDATE_BACK_ERROR(4003),
    /**
     * <pre>
     *服务器打开充电舱
     * </pre>
     *
     * <code>OPEN = 1005;</code>
     */
    OPEN(1005),
    /**
     * <pre>
     *机器打开充电舱成功
     * </pre>
     *
     * <code>OPEN_BACK_OK = 2005;</code>
     */
    OPEN_BACK_OK(2005),
    /**
     * <pre>
     * </pre>
     *
     * <code>OPEN_BACK_ERROR = 4005;</code>
     */
    OPEN_BACK_ERROR(4005),
    /**
     * <pre>
     *客户端发送归还类型消息
     * </pre>
     *
     * <code>RETURN = 1006;</code>
     */
    RETURN(1006),
    /**
     * <pre>
     *服务器返回归还成功
     * </pre>
     *
     * <code>RETURN_BACK_OK = 2006;</code>
     */
    RETURN_BACK_OK(2006),
    /**
     * <code>RETURN_BACK_ERROR = 4006;</code>
     */
    RETURN_BACK_ERROR(4006),
    /**
     * <pre>
     *客户端发送更换消息
     * </pre>
     *
     * <code>CHANGE = 1007;</code>
     */
    CHANGE(1007),
    /**
     * <pre>
     *更换成功
     * </pre>
     *
     * <code>CHANGE_BACK_OK = 2007;</code>
     */
    CHANGE_BACK_OK(2007),
    /**
     * <pre>
     *更换失败
     * </pre>
     *
     * <code>CHANGE_BACK_ERROR = 4007;</code>
     */
    CHANGE_BACK_ERROR(4007),
    /**
     * <pre>
     *服务器发送更换状态
     * </pre>
     *
     * <code>CHANGE_MODE = 1008;</code>
     */
    CHANGE_MODE(1008),
    /**
     * <pre>
     *客户端进入更换状态
     * </pre>
     *
     * <code>CHANGE_MODE_OK = 2008;</code>
     */
    CHANGE_MODE_OK(2008),
    /**
     * <pre>
     *更换状态失败
     * </pre>
     *
     * <code>CHANGE_MODE_ERROR = 4008;</code>
     */
    CHANGE_MODE_ERROR(4008),
    /**
     * <pre>
     *服务器发送锁住充电舱
     * </pre>
     *
     * <code>LOCK = 1009;</code>
     */
    LOCK(1009),
    /**
     * <pre>
     *指定充电舱锁住成功
     * </pre>
     *
     * <code>LOCK_BACK_OK = 2009;</code>
     */
    LOCK_BACK_OK(2009),
    /**
     * <code>LOCK_BACK_ERROR = 4009;</code>
     */
    LOCK_BACK_ERROR(4009),
    /**
     * <pre>
     *机器发送充电舱或者充电宝损坏信息
     * </pre>
     *
     * <code>ERROR = 1010;</code>
     */
    ERROR(1010),
    /**
     * <pre>
     *服务器记录故障成功
     * </pre>
     *
     * <code>ERROR_BACK_OK = 2010;</code>
     */
    ERROR_BACK_OK(2010),
    /**
     * <code>ERROR_BACK_ERROR = 4010;</code>
     */
    ERROR_BACK_ERROR(4010),
    /**
     * <code>HEAT = 1011;</code>
     */
    HEAT(1011),
    /**
     * <code>REQ = 1012;</code>
     */
    REQ(1012),
    /**
     * <code>RESP = 1013;</code>
     */
    RESP(1013),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ZERO = 0;</code>
     */
    public static final int ZERO_VALUE = 0;
    /**
     * <pre>
     *客户端发送机器码认证
     * </pre>
     *
     * <code>AUTH = 1001;</code>
     */
    public static final int AUTH_VALUE = 1001;
    /**
     * <pre>
     *服务认证成功
     * </pre>
     *
     * <code>AUTH_BACK_OK = 2001;</code>
     */
    public static final int AUTH_BACK_OK_VALUE = 2001;
    /**
     * <pre>
     *认证失败
     * </pre>
     *
     * <code>AUTH_BACK_ERROR = 4001;</code>
     */
    public static final int AUTH_BACK_ERROR_VALUE = 4001;
    /**
     * <pre>
     *客户端初始化机器data
     * </pre>
     *
     * <code>INIT = 1002;</code>
     */
    public static final int INIT_VALUE = 1002;
    /**
     * <pre>
     *服务器存储init数据成功
     * </pre>
     *
     * <code>INIT_BACK_OK = 2002;</code>
     */
    public static final int INIT_BACK_OK_VALUE = 2002;
    /**
     * <pre>
     * </pre>
     *
     * <code>INIT_BACK_ERROR = 4002;</code>
     */
    public static final int INIT_BACK_ERROR_VALUE = 4002;
    /**
     * <pre>
     *客户端轮询更新data
     * </pre>
     *
     * <code>UPDATE = 1003;</code>
     */
    public static final int UPDATE_VALUE = 1003;
    /**
     * <pre>
     *服务器更新成功
     * </pre>
     *
     * <code>UPDATE_BACK_OK = 2003;</code>
     */
    public static final int UPDATE_BACK_OK_VALUE = 2003;
    /**
     * <pre>
     *更新失败
     * </pre>
     *
     * <code>UPDATE_BACK_ERROR = 4003;</code>
     */
    public static final int UPDATE_BACK_ERROR_VALUE = 4003;
    /**
     * <pre>
     *服务器打开充电舱
     * </pre>
     *
     * <code>OPEN = 1005;</code>
     */
    public static final int OPEN_VALUE = 1005;
    /**
     * <pre>
     *机器打开充电舱成功
     * </pre>
     *
     * <code>OPEN_BACK_OK = 2005;</code>
     */
    public static final int OPEN_BACK_OK_VALUE = 2005;
    /**
     * <pre>
     * </pre>
     *
     * <code>OPEN_BACK_ERROR = 4005;</code>
     */
    public static final int OPEN_BACK_ERROR_VALUE = 4005;
    /**
     * <pre>
     *客户端发送归还类型消息
     * </pre>
     *
     * <code>RETURN = 1006;</code>
     */
    public static final int RETURN_VALUE = 1006;
    /**
     * <pre>
     *服务器返回归还成功
     * </pre>
     *
     * <code>RETURN_BACK_OK = 2006;</code>
     */
    public static final int RETURN_BACK_OK_VALUE = 2006;
    /**
     * <code>RETURN_BACK_ERROR = 4006;</code>
     */
    public static final int RETURN_BACK_ERROR_VALUE = 4006;
    /**
     * <pre>
     *客户端发送更换消息
     * </pre>
     *
     * <code>CHANGE = 1007;</code>
     */
    public static final int CHANGE_VALUE = 1007;
    /**
     * <pre>
     *更换成功
     * </pre>
     *
     * <code>CHANGE_BACK_OK = 2007;</code>
     */
    public static final int CHANGE_BACK_OK_VALUE = 2007;
    /**
     * <pre>
     *更换失败
     * </pre>
     *
     * <code>CHANGE_BACK_ERROR = 4007;</code>
     */
    public static final int CHANGE_BACK_ERROR_VALUE = 4007;
    /**
     * <pre>
     *服务器发送更换状态
     * </pre>
     *
     * <code>CHANGE_MODE = 1008;</code>
     */
    public static final int CHANGE_MODE_VALUE = 1008;
    /**
     * <pre>
     *客户端进入更换状态
     * </pre>
     *
     * <code>CHANGE_MODE_OK = 2008;</code>
     */
    public static final int CHANGE_MODE_OK_VALUE = 2008;
    /**
     * <pre>
     *更换状态失败
     * </pre>
     *
     * <code>CHANGE_MODE_ERROR = 4008;</code>
     */
    public static final int CHANGE_MODE_ERROR_VALUE = 4008;
    /**
     * <pre>
     *服务器发送锁住充电舱
     * </pre>
     *
     * <code>LOCK = 1009;</code>
     */
    public static final int LOCK_VALUE = 1009;
    /**
     * <pre>
     *指定充电舱锁住成功
     * </pre>
     *
     * <code>LOCK_BACK_OK = 2009;</code>
     */
    public static final int LOCK_BACK_OK_VALUE = 2009;
    /**
     * <code>LOCK_BACK_ERROR = 4009;</code>
     */
    public static final int LOCK_BACK_ERROR_VALUE = 4009;
    /**
     * <pre>
     *机器发送充电舱或者充电宝损坏信息
     * </pre>
     *
     * <code>ERROR = 1010;</code>
     */
    public static final int ERROR_VALUE = 1010;
    /**
     * <pre>
     *服务器记录故障成功
     * </pre>
     *
     * <code>ERROR_BACK_OK = 2010;</code>
     */
    public static final int ERROR_BACK_OK_VALUE = 2010;
    /**
     * <code>ERROR_BACK_ERROR = 4010;</code>
     */
    public static final int ERROR_BACK_ERROR_VALUE = 4010;
    /**
     * <code>HEAT = 1011;</code>
     */
    public static final int HEAT_VALUE = 1011;
    /**
     * <code>REQ = 1012;</code>
     */
    public static final int REQ_VALUE = 1012;
    /**
     * <code>RESP = 1013;</code>
     */
    public static final int RESP_VALUE = 1013;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MsgType valueOf(int value) {
      return forNumber(value);
    }

    public static MsgType forNumber(int value) {
      switch (value) {
        case 0: return ZERO;
        case 1001: return AUTH;
        case 2001: return AUTH_BACK_OK;
        case 4001: return AUTH_BACK_ERROR;
        case 1002: return INIT;
        case 2002: return INIT_BACK_OK;
        case 4002: return INIT_BACK_ERROR;
        case 1003: return UPDATE;
        case 2003: return UPDATE_BACK_OK;
        case 4003: return UPDATE_BACK_ERROR;
        case 1005: return OPEN;
        case 2005: return OPEN_BACK_OK;
        case 4005: return OPEN_BACK_ERROR;
        case 1006: return RETURN;
        case 2006: return RETURN_BACK_OK;
        case 4006: return RETURN_BACK_ERROR;
        case 1007: return CHANGE;
        case 2007: return CHANGE_BACK_OK;
        case 4007: return CHANGE_BACK_ERROR;
        case 1008: return CHANGE_MODE;
        case 2008: return CHANGE_MODE_OK;
        case 4008: return CHANGE_MODE_ERROR;
        case 1009: return LOCK;
        case 2009: return LOCK_BACK_OK;
        case 4009: return LOCK_BACK_ERROR;
        case 1010: return ERROR;
        case 2010: return ERROR_BACK_OK;
        case 4010: return ERROR_BACK_ERROR;
        case 1011: return HEAT;
        case 1012: return REQ;
        case 1013: return RESP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        MsgType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.fly.netty.codec.protobuf.MessageType.getDescriptor().getEnumTypes().get(0);
    }

    private static final MsgType[] VALUES = values();

    public static MsgType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private MsgType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:MsgType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021MessageType.proto*\247\004\n\007MsgType\022\010\n\004ZERO\020" +
      "\000\022\t\n\004AUTH\020\351\007\022\021\n\014AUTH_BACK_OK\020\321\017\022\024\n\017AUTH_" +
      "BACK_ERROR\020\241\037\022\t\n\004INIT\020\352\007\022\021\n\014INIT_BACK_OK" +
      "\020\322\017\022\024\n\017INIT_BACK_ERROR\020\242\037\022\013\n\006UPDATE\020\353\007\022\023" +
      "\n\016UPDATE_BACK_OK\020\323\017\022\026\n\021UPDATE_BACK_ERROR" +
      "\020\243\037\022\t\n\004OPEN\020\355\007\022\021\n\014OPEN_BACK_OK\020\325\017\022\024\n\017OPE" +
      "N_BACK_ERROR\020\245\037\022\013\n\006RETURN\020\356\007\022\023\n\016RETURN_B" +
      "ACK_OK\020\326\017\022\026\n\021RETURN_BACK_ERROR\020\246\037\022\013\n\006CHA" +
      "NGE\020\357\007\022\023\n\016CHANGE_BACK_OK\020\327\017\022\026\n\021CHANGE_BA" +
      "CK_ERROR\020\247\037\022\020\n\013CHANGE_MODE\020\360\007\022\023\n\016CHANGE_",
      "MODE_OK\020\330\017\022\026\n\021CHANGE_MODE_ERROR\020\250\037\022\t\n\004LO" +
      "CK\020\361\007\022\021\n\014LOCK_BACK_OK\020\331\017\022\024\n\017LOCK_BACK_ER" +
      "ROR\020\251\037\022\n\n\005ERROR\020\362\007\022\022\n\rERROR_BACK_OK\020\332\017\022\025" +
      "\n\020ERROR_BACK_ERROR\020\252\037\022\t\n\004HEAT\020\363\007\022\010\n\003REQ\020" +
      "\364\007\022\t\n\004RESP\020\365\007B+\n\034com.fly.netty.codec.pro" +
      "tobufB\013MessageTypeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
